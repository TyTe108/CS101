//-----------------------------------------------------------------------------
//  MatrixClient.c 
//  A test client for the Matrix ADT
//-----------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#include"Matrix.h"
     
int main(){
   /* int n=100000; */
   /* Matrix A = newMatrix(n); */
   /* Matrix B = newMatrix(n); */
   /* Matrix C, D, E, F, G, H; */

   /* changeEntry(A, 1,1,1); changeEntry(B, 1,1,1); */
   /* changeEntry(A, 1,2,2); changeEntry(B, 1,2,0); */
   /* changeEntry(A, 1,3,3); changeEntry(B, 1,3,1); */
   /* changeEntry(A, 2,1,4); changeEntry(B, 2,1,0);  */
   /* changeEntry(A, 2,2,5); changeEntry(B, 2,2,1); */
   /* changeEntry(A, 2,3,6); changeEntry(B, 2,3,0);  */
   /* changeEntry(A, 3,1,7); changeEntry(B, 3,1,1);  */
   /* changeEntry(A, 3,2,8); changeEntry(B, 3,2,1);  */
   /* changeEntry(A, 3,3,9); changeEntry(B, 3,3,1); */


   /* //My Own Function getEntry Test */
   /* //Entry getA = getEntry(A, 3, 3); */
   /* // printf("Entry at 3,3 is: %.1f\n", x); */



   /* printf("%d\n", NNZ(A)); */
   /* printMatrix(stdout, A); */
   /* printf("\n"); */

   /* printf("%d\n", NNZ(B)); */
   /* printMatrix(stdout, B); */
   /* printf("\n"); */

   /* C = scalarMult(1.5, A); */
   /* printf("%d\n", NNZ(C)); */
   /* printMatrix(stdout, C); */
   /* printf("\n"); */

   /* D = sum(A, B); */
   /* printf("%d\n", NNZ(D)); */
   /* printMatrix(stdout, D); */
   /* printf("\n"); */

   /* E = diff(A, A); */
   /* printf("%d\n", NNZ(E)); */
   /* printMatrix(stdout, E); */
   /* printf("\n"); */

   /* F = transpose(B); */
   /* printf("%d\n", NNZ(F)); */
   /* printMatrix(stdout, F); */
   /* printf("\n"); */

   /* G = product(B, B); */
   /* printf("%d\n", NNZ(G)); */
   /* printMatrix(stdout, G); */
   /* printf("\n"); */

   /* H = copy(A); */
   /* printf("%d\n", NNZ(H)); */
   /* printMatrix(stdout, H); */
   /* printf("\n"); */

   /* printf("%s\n", equals(A, H)?"true":"false" );  */
   /* printf("%s\n", equals(A, B)?"true":"false" );  */
   /* printf("%s\n", equals(A, A)?"true":"false" );  */


   /* makeZero(A); */
   /* printf("%d\n", NNZ(A)); */
   /* printMatrix(stdout, A); */

   /*  freeMatrix(&A); */
   /*  freeMatrix(&B); */
   /*  freeMatrix(&C);  */
   /*  freeMatrix(&D); */
   /*  freeMatrix(&E); */
   /*  freeMatrix(&F); */
   /*  freeMatrix(&G); */
   /*  freeMatrix(&H); */ 

  Matrix A = newMatrix(100);
  Matrix B = newMatrix(100);
  Matrix C;
  Matrix D;

  int valcount = 1;
  for (int j = 1; j <= 100; j++) {
    for (int k = 1; k <= 100; k++) {
      // hint: this is 1-10000 left-to-right row-by-row
      changeEntry(A, j, k, valcount++);
    }
    changeEntry(B, j, j, 1); // hint: this is the identity matrix
  }
  C = scalarMult(2, A);
  D = sum(A, A);
  
  freeMatrix(&C);
  freeMatrix(&D);


  C = scalarMult(-2, A);
  Matrix As1 = diff(A, A);
  Matrix As2 = diff(As1, A);
  D = diff(As2, A);
  freeMatrix(&As1);
  freeMatrix(&As2);


  
  if (!equals(C, D)){
    printf("FAILED\n");
  }
 else{
    printf("PASSED\n");
  }

  



  /* freeMatrix(&A); */
  /* freeMatrix(&B); */
  //freeMatrix(&C);


  

   return EXIT_SUCCESS;
}

